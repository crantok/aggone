<?php

/**
 * @file
 * Make OG group terms of which the current user is a member available as tags
 * on content.
 */

function group_tags_menu() {
  return array(

    'node/%node/add-to-interest-group/%taxonomy_term' => array(
      'type' => MENU_CALLBACK,
      'access callback' => '_group_tags_access_add_to_group',
      'access arguments' => array( 3 ),
      'page callback' => '_group_tags_add_to_group',
      'page arguments' => array( 1, 3 ),
    ),

    'node/%node/remove-from-interest-group/%taxonomy_term' => array(
      'type' => MENU_CALLBACK,
      'access callback' => '_group_tags_access_remove_from_group',
      'access arguments' => array( 3 ),
      'page callback' => '_group_tags_remove_from_group',
      'page arguments' => array( 1, 3 ),
    ),

  );
}

function _group_tags_access_add_to_group( $term_group ) {
  return og_user_access( 'taxonomy_term', $term_group->tid, 'create imported_article content' );
}

function _group_tags_access_remove_from_group( $term_group ) {
  return og_user_access( 'taxonomy_term', $term_group->tid, 'delete any imported_article content' );
}

function _group_tags_add_to_group( $node_to_tag, $term_group ) {

  $existing_terms = get_one_dimensional_array_from_field_items(
    field_get_items( 'node', $node_to_tag, 'field_interest_groups' ), 'tid'
  );

  // Is the given group absent from the terms the node is tagged with?
  if ( ! in_array( $term_group->tid, $existing_terms ) ) {

    $new_terms = get_field_items_from_one_dimensional_array(
      array_merge( $existing_terms, array( $term_group->tid ) ), 'tid'
    );

    // Save the node with the expanded list of terms.
    field_set_items('node', $node_to_tag, 'field_interest_groups', $new_terms);
    node_save( $node_to_tag );
  }

  _group_terms_goto( $node_to_tag );
}

function _group_tags_remove_from_group( $node_to_detag, $term_group ) {

  $existing_terms = get_one_dimensional_array_from_field_items(
    field_get_items( 'node', $node_to_detag, 'field_interest_groups' ), 'tid'
  );

  $key_to_delete = array_search($term_group->tid, $existing_terms);

  // Is the node currently tagged with the given group?
  if ( $key_to_delete !== FALSE ) {

    $new_terms = $existing_terms;
    unset( $new_terms[$key_to_delete] );

    // Save the node with the truncated list of terms.
    field_set_items('node', $node_to_detag, 'field_interest_groups',
      get_field_items_from_one_dimensional_array( $new_terms, 'tid' )
    );
    node_save( $node_to_detag );
  }

  _group_terms_goto( $node_to_detag );
}

/**
 * Redirect the user to somewhere useful.
 */
function _group_terms_goto( $node ) {

  // Was there a destination in the URL?
  if ( isset($_GET['destination']) ) {
    $destination = urlencode($_GET['destination']);
  }
  else {
    $destination = "node/$node->nid";
  }
  drupal_goto( $destination );
}


/**
 *
 */
function group_tags_node_view($node, $view_mode, $langcode) {

  // TO DO : Change to using a theme function or template!!!
  $node->content['interest_groups_toggle'] = array(
    '#markup' => _group_tags_get_markup_for_tag_links_node_element($node),
    '#weight' => 100,
  );
}

function _group_tags_get_markup_for_tag_links_node_element($node) {
  $users_groups =
    _group_tags_get_users_taxonomy_groups( array('interest_group') );
  $nodes_group_ids = _group_tags_get_nodes_interest_group_ids($node);

  $links = array();
  foreach ($users_groups as $id => $group) {
    if ( in_array( $id, $nodes_group_ids ) ) {
      $links[] =
        _group_tags_get_markup_for_remove_tag_link( $group, $node->nid );
    }
    else {
      $links[] =
        _group_tags_get_markup_for_add_tag_link( $group, $node->nid );
    }
  }

  $links = array_filter( $links );

  if ( ! empty( $links ) ) {
    return _group_tags_get_markup_for_tag_links_list($links);
  }
}

function _group_tags_get_users_taxonomy_groups( $vocabularies, $user=NULL) {

  $groups = taxonomy_term_load_multiple(
    og_get_groups_by_user($user, 'taxonomy_term')
  );

  // Cull groups that are from vocabularies that were not requested.
  foreach ( $groups as $id => $group ) {
    if ( ! in_array( $group->vocabulary_machine_name, $vocabularies ) ) {
      unset( $groups[$id] );
    }
  }

  return $groups;
}

function _group_tags_get_nodes_interest_group_ids($node) {

  $groups = field_get_items( 'node', $node, 'field_interest_groups' );
  return get_one_dimensional_array_from_field_items( $groups, 'tid' );
}

function _group_tags_get_markup_for_tag_links_list($links) {

  $markup = '<div class="interest-group-toggle"><ul>';
  foreach ( $links as $link ) {
    $markup .= '<li>' . $link . '</li>';
  }
  $markup .= '</ul></div>';
  return $markup;
}

function _group_tags_get_markup_for_add_tag_link($term, $nid) {

  $path = "node/$nid/add-to-interest-group/$term->tid";

  // Does the user have access to the relevant path?
  if ( current_user_has_access($path)) {

    // Return an appropriately labeled link.
    return l(
      t('Add to interest group: @term_name',
        array( '@term_name' => $term->name ) ),
      $path,
      array('query' => drupal_get_destination())
    );
  }
  else {
    return FALSE;
  }
}

function _group_tags_get_markup_for_remove_tag_link($term, $nid) {

  $path = "node/$nid/remove-from-interest-group/$term->tid";

  // Does the user have access to the relevant path?
  if ( current_user_has_access($path)) {

    // Return an appropriately labeled link.
    return l(
      t('Remove from interest group: @term_name',
        array( '@term_name' => $term->name ) ),
      $path,
      array('query' => drupal_get_destination())
    );
  }
  else {
    return FALSE;
  }
}



////////////
/// General utility functions.
/// These should go somewhere else.
////////////

function current_user_has_access( $path ) {
  return ($router_item = menu_get_item($path)) && $router_item['access'];
}

function get_one_dimensional_array_from_field_items( $field_items, $key ) {
  if ( ! empty( $field_items ) ) {
    foreach ( $field_items as $index => $item ) {
      $field_items[$index] = $item[$key];
    }
    return $field_items;
  }
  else {
    return array();
  }
}

function get_field_items_from_one_dimensional_array( $items, $key ) {
  if ( ! empty( $items ) ) {
    foreach ( $items as $index => $value ) {
      $items[$index]= array($key => $value );
    }
    return $items;
  }
  else {
    return array();
  }
}

/**
* Sets the field items
* Stolen from https://www.drupal.org/node/1500308#comment-6832522
* @param $entity_type
* @param $entity
* @param $field_name
* @param $items
* @param $langcode
*/
function field_set_items($entity_type, &$entity, $field_name, $items, $langcode = NULL) {
  if ($langcode) {
    $lang = $langcode;
  } else {
    $field_info = field_info_field($field_name);
    $lang = $field_info['translatable'] ? entity_language($entity_type, $entity) : LANGUAGE_NONE;
  }
  if (empty($entity->{$field_name})) {
    $entity->{$field_name} = array();
  }
  $entity->{$field_name}[$lang] = $items;
}
